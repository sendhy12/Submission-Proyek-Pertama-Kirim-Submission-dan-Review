# -*- coding: utf-8 -*-
"""Predikdi Harga Beras Medium_Regresi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oymDEM71UWXQolTuHMjAWBfCqXJ3a1jO

# **Predictive Analytics: Harga Beras Medium**


---

## **Deskripsi Proyek**

### **Deskripsi Latar Belakang Proyek Prediksi Harga Beras Medium dengan Machine Learning**


Sektor perdagangan pangan memainkan peran vital dalam kestabilan ekonomi daerah. Kabupaten Sumedang secara rutin mengumpulkan data harga barang pokok seperti beras, gula, dan minyak dari berbagai pasar tradisional. Salah satu komoditas utama yang sangat dipantau harganya adalah Beras Medium, karena menjadi kebutuhan dasar sebagian besar masyarakat.

Namun, harga beras kerap mengalami fluktuasi yang dapat mempengaruhi daya beli masyarakat dan kebijakan pemerintah daerah. Oleh karena itu, kemampuan untuk memprediksi harga Beras Medium di masa depan menggunakan pendekatan Machine Learning dapat memberikan nilai tambah yang signifikan bagi pengambil kebijakan dan pelaku pasar.

## **1. Import Library yang Dibutuhkan**
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

"""## **2. Data Understanding**


Data Understanding merupakan proses memahami informasi dalam data dan menentukan kualitas dari data tersebut.

### 2.1 Data Loading



Data Loading merupakan tahap untuk memuat dataset yang akan digunakan dalam proyek. Dataset ini berisi informasi harga komoditas pasar tradisional di Kabupaten Sumedang yang dikumpulkan oleh Dinas Koperasi, UKM, Perdagangan, dan Perindustrian. Dataset mencakup data historis dari berbagai pasar, tanggal pencatatan, serta rincian barang yang dijual seperti nama barang, satuan, dan harga.
"""

# Load data
df = pd.read_csv("https://raw.githubusercontent.com/sendhy12/datasetd/refs/heads/main/data_produk_pasar.csv", sep=';')

# Filter hanya Beras Medium
df = df[df['item_barang'] == 'Beras Medium']

"""### **2.2 Exploratory Data Analysis (EDA)**

Exploratory data analysis merupakan proses investigasi awal pada data untuk menganalisis karakteristik, menemukan pola, anomali, dan memeriksa asumsi pada data. Teknik ini biasanya menggunakan bantuan statistik dan representasi grafis atau visualisasi.

#### **2.2.1 EDA - Deskripsi Variabel**
"""

df

"""Dataset yang digunakan berisi data harga komoditas di pasar tradisional Kabupaten Sumedang, khususnya komoditas Beras Medium. Deskripsi variabel yang akan digunakan:

| Nama Variabel     | Deskripsi                                                                 |
|-------------------|---------------------------------------------------------------------------|
| `tanggal`         | Tanggal pencatatan harga komoditas                                       |
| `item_barang`     | Nama komoditas, misalnya "Beras Medium"             |
| `harga`           | Harga barang (dalam Rupiah)                                              |
| `nama_pasar`      | Nama pasar tempat pencatatan                                             |
| `bulan`, `tahun`  | Fitur tambahan hasil ekstraksi dari tanggal                              |
| `pasar_encoded`   | Hasil encoding dari nama pasar                                           |
"""

df.info()

"""Dari eksekusi method `df.info()` terdapat:

- Terdapat 7 kolom numerik dengan tipe data float64 dan int64 yaitu: id, satuan, pasar, nama_item, harga, jumlah, dan kebutuhan.
- Terdapat 5 kolom dengan tipe data object yaitu: tanggal, keterangan, item_barang, satuan_item, dan nama_pasar.

Namun kolom `tanggal` seharusnya bertipe datetime, maka selanjutnya akan dirubah.
"""

# Konversi tanggal
df['tanggal'] = pd.to_datetime(df['tanggal'])
df['tahun'] = df['tanggal'].dt.year
df['bulan'] = df['tanggal'].dt.month

df.describe()

"""Fungsi `describe()` memberikan informasi statistik pada masing-masing kolom, antara lain:

- `Count` adalah jumlah sampel pada data.
- `Mean` adalah nilai rata-rata.
- `Std` adalah standar deviasi.
- `Min` yaitu nilai minimum setiap kolom.
- `25%` adalah kuartil pertama. Kuartil adalah nilai yang menandai batas interval dalam empat bagian sebaran yang sama.
- `50%` adalah kuartil kedua, atau biasa juga disebut median (nilai tengah).
-` 75%` adalah kuartil ketiga.
- `Max` adalah nilai maksimum.
"""

df.describe(include='object')

"""Fungsi `describe(include='object')` memberikan informasi statistik deskriptif pada kolom bertipe objek (biasanya berupa teks atau kategori), antara lain:
- `Count` adalah jumlah entri non-null (tidak kosong) pada kolom tersebut.
- `Unique` adalah jumlah nilai unik (berbeda) yang terdapat pada kolom.
- `Top` adalah nilai yang paling sering muncul (modus) dalam kolom.
- `Freq` adalah jumlah kemunculan nilai yang paling sering muncul (frekuensi dari top).
"""

df.shape

"""Dari eksekusi method` df.shape` Terlihat:
<br>

| Jumlah Baris | Jumlah Kolom |
| ------ | ------ |
| 7630 | 14 |


<br>

#### **2.2.2 EDA - Menangani Missing Value dan Outliers**
"""

df.isnull().sum()

df = df.drop('satuan', axis=1)

df.isnull().sum()

"""- Variabel `satuan` memiliki banyak missing values tetapi tidak digunakan dalam pemodelan, jadi bisa di-drop.
- Kolom yang digunakan untuk modeling tidak memiliki missing values, sehingga tidak diperlukan imputasi.
"""

plt.figure()
sns.boxplot(df, x='harga')
plt.show()

"""*Menghapus outliers yang ada pada dataset*  


Pada kasus ini, kita akan mendeteksi outliers dengan teknik visualisasi data (boxplot). Kemudian, menangani outliers dengan teknik IQR method.


```
IQR = Inter Quartile Range
IQR = Q3 - Q1
```


"""

Q1 = df['harga'].quantile(0.25)
Q3 = df['harga'].quantile(0.75)
IQR = Q3 - Q1
df = df[~((df['harga'] < (Q1 - 1.5 * IQR)) | (df['harga'] > (Q3 + 1.5 * IQR)))]

plt.figure()
sns.boxplot(df, x='harga')
plt.show()

df.shape

"""Jumlah Datasets setalah penanganan Missing Value dan Outlier: `7627, 13`

#### **2.2.3 EDA - Univariate Analysis**

Univariate analysis dilakukan untuk memahami distribusi masing-masing fitur:

**Distribusi Harga Beras Medium:**
"""

sns.histplot(df['harga'], bins=10, kde=True)
plt.title("Distribusi Harga Beras Medium")
plt.xlabel("Harga")
plt.ylabel("Frekuensi")
plt.show()

"""**Frekuensi Nama Pasar:**"""

df['nama_pasar'].value_counts().plot(kind='bar')
plt.title("Jumlah Data per Pasar")
plt.ylabel("Jumlah")
plt.xticks(rotation=45)
plt.show()

"""**Distribusi Waktu (Tahun & Bulan):**"""

sns.countplot(x='bulan', data=df)
plt.title("Distribusi Data per Bulan")
plt.show()

sns.countplot(x='tahun', data=df)
plt.title("Distribusi Data per Tahun")
plt.show()

"""#### **2.2.4 EDA - Multivariate Analysis**

Analisis ini dilakukan untuk memahami hubungan antar fitur terhadap harga.

**Harga vs Bulan:**
"""

sns.boxplot(x='bulan', y='harga', data=df)
plt.title("Harga Beras Medium per Bulan")
plt.show()

"""**Harga vs Nama Pasar:**"""

plt.figure(figsize=(12, 6))
sns.boxplot(x='nama_pasar', y='harga', data=df)
plt.title("Harga Beras Medium Berdasarkan Pasar")
plt.xticks(rotation=45)
plt.show()

"""**Korelasi antar fitur numerik:**"""

# Encode nama pasar
le = LabelEncoder()
df['pasar_encoded'] = le.fit_transform(df['nama_pasar'])

sns.heatmap(df[['harga', 'bulan', 'tahun', 'pasar_encoded']].corr(), annot=True, cmap='coolwarm')
plt.title("Matriks Korelasi")
plt.show()

"""**Insight:**
- Terdapat variasi harga berdasarkan bulan dan pasar.
- Korelasi waktu (tahun) terhadap harga cukup kuat, kemungkinan dapat berkontribusi sebagai fitur prediktor.

## **3. Data Preparation**

### **3.1 Pemilihan Fitur**
"""

X = df[['tahun', 'bulan', 'pasar_encoded']]
y = df['harga']

"""### **3.2 Split Data**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f'Total datasets: {len(X)}')
print(f'Total data Latih: {len(X_train)}')
print(f'Total data Uji: {len(X_test)}')

"""### **3.3 Normalisasi (Khusus untuk Linear Regresi)**"""

scaler = MinMaxScaler()
scaler.fit(X_train)
X_train_scaled = scaler.transform(X_train)
X_test_scaled_ = scaler.transform(X_test)

"""## **4. Model Development**

### **4.1 Linear Regression**
"""

lr = LinearRegression()
lr.fit(X_train_scaled, y_train)

y_pred_lr = lr.predict(X_test_scaled_)

"""### **4.2 Decision Tree**"""

dt = DecisionTreeRegressor(max_depth=5)
dt.fit(X_train, y_train)

y_pred_dt = dt.predict(X_test)

"""### **4.3 Random Forest**"""

rf = RandomForestRegressor(n_estimators=100, max_depth=7)
rf.fit(X_train, y_train)

y_pred_rf = rf.predict(X_test)

"""## **5. Evaluasi Model**

### **5.1 Score Model**
"""

# Evaluasi dan simpan dalam DataFrame
results = []
models = [("Linear Regression", lr, y_pred_lr),
          ("Decision Tree", dt, y_pred_dt),
          ("Random Forest", rf, y_pred_rf)]

for name, model, y_pred in models:
    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)  # Calculate RMSE
    r2 = r2_score(y_test, y_pred)
    results.append([name, mae, mse, rmse, r2])

eval_df = pd.DataFrame(results, columns=["Model", "MAE", "MSE", "RMSE", "R2"])

# Tampilkan tabel evaluasi
eval_df

"""### **5.2 plot Model**"""

import matplotlib.pyplot as plt
metrics = ["MAE", "MSE", "RMSE", "R2"]
for metric in metrics:
  plt.figure(figsize=(8, 6))
  sns.barplot(x='Model', y=metric, data=eval_df)
  plt.title(f'Perbandingan {metric} antar model')
  plt.show()

"""**Insight dari Evaluasi Model Prediksi Harga Beras Medium**

1. **Model dengan Performa Terbaik:**
   - Berdasarkan metrik evaluasi, model **Random Forest** menunjukkan performa terbaik dibandingkan model lainnya.
   - Hal ini terlihat dari nilai **RÂ² tertinggi**, yang mendekati 1, menandakan bahwa model mampu menjelaskan proporsi variasi terbesar dari harga beras.

2. **Tingkat Error:**
   - **MAE (Mean Absolute Error)** dan **RMSE (Root Mean Squared Error)** untuk Random Forest juga yang paling kecil di antara ketiga model.
   - Ini berarti rata-rata kesalahan prediksi model tersebut terhadap harga aktual relatif lebih kecil, menjadikannya lebih andal.
"""